---
roles:
  pe-puppet-master:
    provisioners:
      - type: shell
        name: 'provision puppetserver keys'
        inline: |
          echo "Bootstrapping Code Manager."
          if [[ ! -e /etc/puppetlabs/puppetserver/keys/code-manager.key ]]; then
            echo "Provisioning Puppet Server keys."
            mkdir -p /etc/puppetlabs/puppetserver/keys/
            cp /vagrant/keys/* /etc/puppetlabs/puppetserver/keys/
          fi
      # enables pluginsync and auto cert signing
      - type: pe_bootstrap
        series: '2016.4'
        download_root: http://enterprise.delivery.puppetlabs.net/:series/ci-ready/
        version_file:  http://getpe.delivery.puppetlabs.net/latest/:series
        role: :master
        # NOTE: control repo is public, so no need for private key
        # https://docs.puppet.com/pe/latest/r10k_config.html
        # "puppet_enterprise::profile::master::r10k_private_key": "/etc/puppetlabs/puppetserver/keys/code-manager.key"
        # "puppet_enterprise::profile::master::r10k_remote": "git@github.com:Iristyle/puppetconf2016-controlrepo.git"
        # to whitelist additional nodes:
        # https://github.com/puppetlabs/puppetlabs-puppet_enterprise/blob/2016.5.x/manifests/profile/console.pp#L268-L296
        answer_extras:
          - |
            "puppet_enterprise::profile::master::code_manager_auto_configure": true
            "puppet_enterprise::profile::master::r10k_remote": "https://github.com/Iristyle/puppetconf2016-controlrepo.git"
            "puppet_enterprise::profile::console::console_services_plaintext_status_enabled": true
      # NOTE: with this on, can't resolve internal server agent-downloads.delivery.puppetlabs.net
      # which is necessary when running nightly builds to grab MSI + other agent packages with pe_agent
      # - type: shell
      #   inline: |
      #     echo 'nameserver 8.8.8.8' > /etc/resolv.conf
      - type: shell
        name: 'bootstrap code manager'
        # https://github.com/puppetlabs/tse-vagrant-stack/blob/8383ec2e8d2895ea539b6d11626f1b22b13b35e5/scripts/provisioners/puppet_master_bootstrap.sh#L45
        inline: |
          if [[ $(stat -c '%U' /etc/puppetlabs/puppetserver/keys/) != 'pe-puppet' ]]; then
            echo "Bootstrapping Code Manager."
            export PATH=/opt/puppetlabs/puppet/bin:$PATH
            chown -R pe-puppet:pe-puppet /etc/puppetlabs/puppetserver/keys
            chmod 0700 /etc/puppetlabs/puppetserver/keys
            chmod 0600 /etc/puppetlabs/puppetserver/keys/*
            # Deploy code.
            # NOTE: $PATH doesn't survive sudo.
            sudo -u pe-puppet /opt/puppetlabs/puppet/bin/r10k \
              deploy environment -pv \
              -c /opt/puppetlabs/server/data/code-manager/r10k.yaml
            # Kick file sync.
            curl -ks -X POST -H "Content-Type: application/json" \
              --cert $(puppet config print hostcert) \
              --key $(puppet config print hostprivkey) \
              --data '{"commit-all": true}' \
              'https://127.0.0.1:8140/file-sync/v1/commit' | \
            python -m json.tool
          fi
      - type: shell
        name: 'setup Vagrant RBAC user'
        inline: |
          echo "Creating RBAC vagrant user."
          # Note that /users can only look up by id, not name - so punt on writing this idempotently
          sudo curl -ks -X POST -H "Content-Type: application/json" \
            --cert /etc/puppetlabs/puppet/ssl/certs/davis-master.vm.pem \
            --key /etc/puppetlabs/puppet/ssl/private_keys/davis-master.vm.pem \
            --cacert /etc/puppetlabs/puppet/ssl/certs/ca.pem \
            --data '{"login":"vagrant", "email":"", "display_name":"Vagrant User", "role_ids": [1], "password": "vagrant"}' \
            'https://davis-master.vm:4433/rbac-api/v1/users' | \
          python -m json.tool

          # minor hack - return 0 exit status even if user existed or JSON failed to parse - assume it works
          exit 0
  windows-reboot:
    provisioners:
      - {type: shell, inline: 'shutdown -t 0 -r -f'}

  pe-client-tools-windows:
    provisioners:
      - {type: shell, path: './config/install-pe-client-tools.bat'}
      - {type: shell, path: './config/config-client-tools.ps1', args: 'davis-master.vm'}

  choco-client-windows:
    provisioners:
      - {type: shell, path: './config/install-choco-client.bat', args: 'internal-choco-feed win2012-choco chocolateyrocks'}

  devbox-windows:
    provisioners:
      - {type: shell, path: './config/setup-dev-box.ps1'}

  # base definition hacked from puppet-debugging-kit
  base:
    private_networks:
      - {auto_network: true}
    provisioners:
      # A generic hosts provisioner is defined here so that networking is one
      # of the first things configured. Other roles can hook into the
      # 'base networking' provisioner and override settings.
      - type: hosts
        name: 'base networking'
        preserve_order: true
        sync_hosts: true
        add_localhost_hostnames: false
        hosts:
          - ['@vagrant_private_networks', ['@vagrant_hostnames']]
        imports: ['global', 'virtualbox', 'vmware']
        exports:
          virtualbox:
            - ['@vagrant_private_networks', ['@vagrant_hostnames']]
    providers:
      - type: virtualbox
        linked_clone: true

  el-stop-firewall:
    provisioners:
      - type: shell
        inline: |
          RH_VERS=$(rpm -q --qf "%{VERSION}" $(rpm -q --whatprovides redhat-release)|grep -o '^[0-9]')
          if [ "$RH_VERS" -gt "6" ]; then
            systemctl stop firewalld.service
            systemctl disable firewalld.service
          else
            service iptables stop
            chkconfig iptables off
          fi

          # Some templates have firewalls configured weird. Just return success.
          exit 0

  # Adds /usr/local/bin to the PATH
  el-fix-path:
    provisioners:
      - type: shell
        inline: |
          echo "export PATH=$PATH:/usr/local/bin" > /etc/profile.d/path_fix.sh
  256mb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 256]
      - type: vmware_fusion
        vmx: { memsize: 256 }
  512mb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 512]
      - type: vmware_fusion
        vmx: { memsize: 512 }
  1gb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 1024]
      - type: vmware_fusion
        vmx: { memsize: 1024 }
  1.2gb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 1200]
      - type: vmware_fusion
        vmx: { memsize: 1200 }
  1.5gb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 1536]
      - type: vmware_fusion
        vmx: { memsize: 1536 }
  2gb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 2048]
      - type: vmware_fusion
        vmx: { memsize: 2048 }
  3gb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 3072]
      - type: vmware_fusion
        vmx: { memsize: 3072 }
  4gb-memory:
    providers:
      - type: virtualbox
        customize:
          - [modifyvm, !ruby/sym id, '--memory', 4096]
      - type: vmware_fusion
        vmx: { memsize: 4096 }

  # For PE 2015.2 and newer - taken from Sharpie's Puppet Debugging Kit
  #
  # I hate this, but if we consolidate it into 1 role, all PE 3.x boxes break
  # because the installer freaks out if `/etc/puppetlabs` exists.
  pe-memory-tuning2:
    provisioners:
      # Upload to /tmp and then use a shell script to copy into place. This
      # method works with remote machines.
      - type: file
        source: './config/pe-memory-tuning.yaml'
        destination: '/tmp/common.yaml'
      - type: shell
        inline: |-
          mkdir -p /etc/puppetlabs/code/environments/production/hieradata
          if [ -e /tmp/common.yaml ]; then
            install -m 0644 /tmp/common.yaml /etc/puppetlabs/code/environments/production/hieradata
          fi

  # designed for 3GB of RAM
  pe-memory-tuning3:
    provisioners:
      # Upload to /tmp and then use a shell script to copy into place. This
      # method works with remote machines.
      - type: file
        source: './config/pe-memory-tuning-3gb.yaml'
        destination: '/tmp/common.yaml'
      - type: shell
        inline: |-
          mkdir -p /etc/puppetlabs/code/environments/production/hieradata
          if [ -e /tmp/common.yaml ]; then
            install -m 0644 /tmp/common.yaml /etc/puppetlabs/code/environments/production/hieradata
          fi

  pe-forward-console:
    forwarded_ports:
      - {guest: 443, host: 4443, auto_correct: true}

  forward-http:
    forwarded_ports:
      - {guest: 80, host: 8089, auto_correct: true}

  forward-haproxy-console:
    forwarded_ports:
      - {guest: 9000, host: 9000, auto_correct: true}

  windows:
    guest: windows
    communicator: winrm
    forwarded_ports:
      # - {guest: 22,   host: 2222,  auto_correct: true, id: ssh}
      - {guest: 3389, host: 3389, auto_correct: true, id: rdp}
    providers:
      - type: virtualbox
        # necessary in case boxes (like Windows 10) are not set headless
        gui: false
        # must disable clipboard on 4.3.16 or else deal with major corruption!
        # https://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm-other
        customize:
          - [modifyvm, !ruby/sym id, '--clipboard', 'disabled']
          # - [modifyvm, !ruby/sym id, '--natdnshostresolver1', 'on']
          - [modifyvm, !ruby/sym id, '--audio', 'none']
          - [modifyvm, !ruby/sym id, '--usb', 'off']
    provisioners:
      # necessary for boxes that don't have RDP enabled
      - {type: shell, path: './config/enable-rdp.bat'}

  windows-81_2012r2-wmf5:
    provisioners:
      - {type: shell, path: './config/install-wmf5-8.1-and-2012r2.bat'}
